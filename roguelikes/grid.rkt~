#lang racket

(require utilities/proletariat
         (rename-in roguelikes/white-whale-data3 [floor dungeon-floor] [exit dungeon-exit])
         functional/better-monads
         utilities/rmatch-let
         functional/point-free)

(define/class grid (object) 'keys '() 'data '() 'min-x +inf.0 'max-x -inf.0 'min-y +inf.0 'max-y -inf.0)

(define-method (at grid pos) :: #(grid list)
  (match grid 
    [(hash-table grid ('data data) (_ _) ...)
     (dict-ref data pos #f)]))

(define-method (at grid s) :: #(grid symbol)
  (match s
    ['count (with-slots grid (data) (dict-count data))]
    [_ (call-next-method)]))


(define (pos< p1 p2)
  (match (list p1 p2)
    [(list
      (list (? number? i1)
            (? number? j1))
      (list (? number? i2)
            (? number? j2)))
     (if (= i1 i2) (< j1 j2)
         (< i1 i2))]))

(define (pos-cons p pl . acc)
  (match acc 
    [(list) (pos-cons p pl '())]
    [(list acc)
     (match pl
       [(list) (reverse (cons p acc))]
       [(cons h rest)
        (cond 
          ((pos< p h) (append (reverse (cons p acc)) pl))
          ((equal? p h) (append (reverse acc) pl))
          (else (pos-cons p rest (cons h acc))))])]))

(define (pos-remove p pl . acc)
  (match acc
    [(list) (pos-remove p pl '())]
    [(list acc)
     (match pl
       [(list) (reverse acc)]
       [(cons h rest)
        (cond
          ((equal? p h) (append (reverse acc) rest))
          (else (pos-remove p rest (cons h acc))))])]))

(define (update-grid-min/max grid)
  (let* ((positions (at grid 'keys)))
    (if (empty? positions)
        (adjust grid 'min-x +inf.0 'max-x -inf.0 'min-y +inf.0 'max-y -inf.0)
        (let*
            ((first (car positions))
             (init (list (car first) (cadr first)
                         (car first) (cadr first))))
          (match 
              (foldl 
               (lambda (it ac)
                 (match it
                   [(list minx miny maxx maxy)
                    (match ac
                      [(list cx cy)
                       (list 
                        (min minx cx)
                        (min miny cy)
                        (max maxx cx)
                        (max maxy cy))])]))
               init
               (cdr positions))
            [(list minx miny maxx maxy)
             (adjust grid
                     'min-x minx
                     'max-x maxx
                     'min-y miny
                     'max-y maxy)])))))

(define-multimethod (set-at gr p val) :: (vector-immutable (class-name gr) (class-name p)))
(define-method (set-at gr p val) :: #(grid list)
  (adjust gr 'data 
          (depending-on (data) (dict-set data p val))
          'keys (depending-on (keys) (pos-cons p keys))
          'min-x (depending-on (min-x) 
                               (min min-x (car p)))
          'min-y (depending-on (min-y)
                               (min min-y (cadr p)))
          'max-x (depending-on (max-x)
                               (max max-x (car p)))
          'max-y (depending-on (max-y)
                               (max max-y (cadr p)))))

(define-multimethod (unset-at grid pos) :: (vector-immutable (class-name grid) 
                                                             (class-name pos)))
(define-method (unset-at grid pos) :: #(grid list)
  (update-grid-min/max
   (adjust grid 
           'data 
           (depending-on (data)
                         (dict-remove data pos))
           'keys (depending-on (keys)
                               (pos-remove pos keys)))))



(define-multimethod (dip-at gr p dip) :: (vector-immutable (class-name gr) (class-name p)))
(define-method (dip-at gr p dip) :: #(grid list)
  (let ((val (at gr p)))
    (set-at gr p (dip val))))

(define-multimethod (square-extent o) :: (class-name o))
(define-method (square-extent g) :: grid
  (cond 
    ((= 0 (at g 'count)) '())
    (else
     (with-slots g (min-x max-x min-y max-y)
                 (list
                  (list min-x min-y)
                  (list max-x max-y))))))

(define pos-i car)
(define pos-j cadr)

(define-match-expander pos 
  (syntax-rules ()
    [(pos x y) (list x y)]))

(define (set-horizontal-line grid x-start x-stop y what)
  (match-let ([(list x-start x-stop) (sort (list x-start x-stop) <)])
    (let loop [(acc grid)
               (i x-start)]
      (if (> i x-stop) acc
          (loop (set-at acc (list i y) what)
                (+ i 1))))))

(define (set-vertical-line grid y-start y-stop x what)
  (match-let ([(list y-start y-stop) (sort (list y-start y-stop) <)])
    (let loop [(acc grid)
               (j y-start)]
      (if (> j y-stop) acc
          (loop (set-at acc (list x j) what)
                (+ j 1))))))

(define (set-rectangle grid . args)
  (match args
    [(list (pos min-x min-y) (pos max-x max-y) thing)
     (set-rectangle grid min-x min-y max-x max-y thing)]
    [(list min-x min-y max-x max-y thing)
     ((compose 
       (partial< set-horizontal-line min-x max-x min-y thing)
       (partial< set-horizontal-line min-x max-x max-y thing)
       (partial< set-vertical-line (+ min-y 1) (- max-y 1) min-x thing)
       (partial< set-vertical-line (+ min-y 1) (- max-y 1) max-x thing))
      grid)]))

(define (set-filled-rectangle grid . args)
  (match args
    [(list (pos min-x min-y) (pos max-x max-y) thing)
     (set-rectangle grid min-x min-y max-x max-y thing)]
    [(list min-x min-y max-x max-y thing)
     (let loop ((x min-x)
                (grid grid))
       (if (> x max-x) grid
           (loop (+ x 1)
                 (set-vertical-line grid min-y max-y x thing))))]))

(define (set-room grid . args)
  (match args
    [(list (pos min-x min-y) (pos max-x max-y))
     (set-rectangle grid min-x min-y max-x max-y)]
    [(list min-x min-y max-x max-y)
     ((compose
       (partial< set-filled-rectangle 
                 (+ min-x 1) (+ min-y 1)
                 (- max-x 1) (- max-y 1)
                 dungeon-floor)
       (partial< set-rectangle 
                 min-x min-y
                 max-x max-y
                 wall))
      grid)]))

(struct doublet (a b) #:transparent)

(define (build-return . items)
  (match-lambda 
    [(doublet l g)
     (doublet (map (partial< doublet l) items) g)]))

(define (promote-cmd o)
  (match o
    [(? procedure?) o]
    [value (match-lambda 
             [(doublet l g) (doublet (list (doublet value l)) g)])]))

(define (build-bind cmd cmd<p>)
  (let ((cmd (promote-cmd cmd)))
    (lambda (dblt)
      (match (cmd dblt)
        [(doublet lvals g)
         (let loop ((lvals lvals)
                    (out-lvals '())
                    (g g))
           (match lvals
             [(list) (doublet out-lvals g)]
             [(cons (doublet prop lstate) lvals)
              (match ((cmd<p> prop) (doublet lstate g))
                [(doublet local-lvals g)
                 (loop 
                  lvals
                  (append out-lvals local-lvals)
                  g)])]))]))))

(define build-zero
  (match-lambda 
    [(state-doublet local-state global-state)
     (doublet (list) global-state)]))

(define (lset field . vals)
  (match-lambda 
    [(doublet l g) 
     (doublet
      (map (lambda (val)
             (doublet val (dict-set l field val)))
           vals)
      g)]))

(define (lget field)
  (match-lambda 
    [(doublet l g)
     (doublet (list (doublet (dict-ref l field #f) l))
              g)]))

(define (gget field)
  (match-lambda 
    [(doublet l g)
     (doublet (list (doublet (dict-ref g field) l)) g)]))

(define (gset field val)
  (match-lambda 
    [(doublet l g)
     (doublet (list (doublet val l))
              (dict-set g field val))]))

(define (pset . assignments)
  (match-lambda 
    [(doublet l g)
     (doublet
      (map 
       (lambda (asg)
         (doublet #t
                  (apply dict-set* l asg)))
       assignments)
      g)]))

(define the-build-monad
  (monad build-bind build-return #f build-zero))

(define (build-plus bf1 bf2)
  (mlet* in: the-build-monad 
         ((r1 bf1)
          (r2 bf2))
         (return r2)))

(define/class turtle/st (object) 
  'pos '(30 30) 
  'facing 0 
  'helicity 1
  'passable-pred (lambda (item) (if (wall? item) #f
                                    item))
  'movement-fun  (build-return #t))

(define/class build/st (object) 'grid (set-filled-rectangle grid 0 0 60 30 wall))

(define (build-set x y what)
  (mlet* in: the-build-monad 
         ((grid (gget 'grid)))
         (gset 'grid
               (set-at grid (list x y) what))))

(define (jump . args)
  (match args
    [(list (? number? x) (? number? y))
     (lset 'pos (list x y))]
    [(cons (list x y)
           rest)
     (lset 'pos (cons (list x y) rest))]))

(define (build-modify x y how)
  (mlet* in: the-build-monad 
         ((grid (gget 'grid))
          (value-at is: (at grid (list x y))))
         (gset 'grid
               (set-at grid (list x y) (how value-at)))))

(define here
  (mlet* in: the-build-monad
         ((pos (lget 'pos))
          (grid (gget 'grid))
          (value-here is: (at grid pos)))
         (return value-here)))

(define (x-of l) (car l))
(define (y-of l) (cadr l))

(define (set-here what)
  (mlet* in: the-build-monad
         ((pos here))
         (build-set (x-of pos) (y-of pos) what)))

(define (modify-here how)
  (mlet* in: the-build-monad
         (((list x y) here))
         (build-modify x y how)))

(define directions (vector 'north 'north-east 'east 'south-east 'south 'south-west 'west 'north-west))
(define dir->vec
  (match-lambda 
    ['north (list 0 1)]
    ['north-east (list 1 1)]
    ['east (list 1 0)]
    ['south-east (list 1 -1)]
    ['south (list 0 -1)]
    ['south-west (list -1 -1)]
    ['west (list -1 0)]
    ['north-west (list -1 1)]))

(define vec->dir 
  (match-lambda 
    [(list 0 1) 'north]
    [(list 1 1) 'north-east]
    [(list 1 0) 'east]
    [(list 1 -1) 'south-east]
    [(list 0 -1) 'south]
    [(list -1 -1) 'south-west]
    [(list -1 0) 'west]
    [(list -1 1) 'north-west]))

(define dir->index
  (match-lambda 
    ['north 0]
    ['north-east 1]
    ['east 2]
    ['south-east 3]
    ['south 4]
    ['south-west 5]
    ['west 6]
    ['north-west 7]
    [(? number? i) (modulo i (length directions))]
    [(? list? x) (dir->index (vec->dir x))]))

(define (index->dir i)
  (vector-ref directions (modulo i (length directions))))

(define (index->vec i)
  (dir->vec (index->dir i)))

(define (extract-grid build-state)
  (match build-state
    [(doublet _ g)
     (dict-ref g 'grid)]))

(define (face . args)
  (match args
    [(list) (lget 'facing)]
    [(? list?) 
     (apply lset 'facing (map dir->index args))]))

(define facing-vector
  (mlet* in: the-build-monad
         ((f (face)))
         (return (index->vec))))

(define (helicity . args)
  (match args
    [(list) (lget 'helicity)]
    [(? list?) 
     (apply lset 'helicity args)]))

(define (positive-integer? n)
  (and (number? n) (>  n 1)))

(define (turn90 n)
  (let ((n (modulo n 4)))
    (match n
      [0 (face)]
      [1 
       (mlet* in: the-build-monad
              ((f (face))
               (h (helicity))
               (i  is: (dir->index f))
               (i+ is: (modulo (+ i (* helicity 2)) (length directions))))
              (face i+))]
      [(? positive-integer?)
       (mlet* in: the-build-monad
              ((<< (turn90 1)))
              (turn90 (- n 1)))])))

(define (turn45 n)
  (let ((n (modulo n 4)))
    (match n
      [0 (face)]
      [1 
       (mlet* in: the-build-monad
              ((f (face))
               (h (helicity))
               (i  is: (dir->index f))
               (i+ is: (modulo (+ i (* helicity 1)) (length directions))))
              (face i+))]
      [(? positive-integer?)
       (mlet* in: the-build-monad
              ((<< (turn90 1)))
              (turn45 (- n 1)))])))

(define turtle-pos 
  (lget 'pos))

(define turtle-position turtle-pos)

(define (scry . args)
  (match args
    [(list x y)
     (mlet* in: the-build-monad
            ((g (gget 'grid)))
            (return (at grid (list x y))))]
    [(list (list x y))
     (scry x y)]
    [(list)
     (mlet* in: the-build-monad
            ((p turtle-pos))
            (scry p))]))


(define (peek . args)
  (match args
    [(list xo yo) 
     (mlet* in: the-build-monad
            ((p turtle-pos))
            (scry (map + p (list xo yo))))]
    [(list (list xo yo))
     (peek xo yo)]
    [(list)
     (mlet* in: the-build-monad
            ((f facing-vector))
            (peek facing-vector))]))

(define (neighboring-positions . args)
  (match args
    [(list x y)
     (mlet* in: the-list-monad
            ((q '(0 1 -1))
             (r '(1 0 -1)))
            (if (and (= 0 q) (= 0 r)) zero
                (return (list (+ x q) (+ y r)))))]
    [(list (list x y))
     (neighboring-positions x y)]))

(define neighbors 
  (mlet* in: the-build-monad
         ((p turtle-pos)
          (ns is: (neighboring-positions p))
          (g (gget 'grid)))
         (return 
          (map (>partial at g) ns))))

(define (set-in-grid . args)
  (match args
    [(list (list x y) what)
     (mlet* in: the-build-monad
            ((g (gget 'grid)))
            (gset 'grid (set-at g (list x y) what)))]
    [(list x y what)
     (set-in-grid (list x y) what)]
    [(list what)
     (mlet* in: the-build-monad
            ((p turtle-position))
            (set-in-grid p what))]))

(define (dip-in-grid . args)
  (match args
    [(list (list x y) how)
     (mlet* in: the-build-monad
            ((g (gget 'grid)))
            (gset 'grid (dip-at g (list x y) how)))]
    [(list x y how)
     (dip-in-grid (list x y) how)]
    [(list how)
     (mlet* in: the-build-monad
            ((p turtle-position))
            (dip-in-grid p how))]))

(define (carve . args)
  (match args
    [(list x y)
     (mlet* in: the-build-monad
            ((h (scry x y)))
            (if (not (floor? h))
                (set-in-grid (list x y) dungeon-floor)
                (return #f)))]
    [(list (list x y))
     (carve x y)]
    [(list)
     (mlet* in: the-build-monad
            ((h turtle-position))
            (carve h))]))

(define (scry/predicate pred . args)
  (mlet* in: the-build-monad
         ((what (apply scry args)))
         (return (pred what))))

(define scry/wall? (>partial scry/predicate wall?))
(define scry/floor? (>partial scry/predicate floor?))

(define (scry/dividing-wall? . args)
  (match args
    [(list x y)
     (monadic-do 
      in: the-build-monad
      (what <- (scry x y))
      (any-floors? <- (reducem 
                       the-build-monad
                       (lambda (pos acc)
                         (monadic-do 
                          in: the-build-monad
                          (nwhat <- (scry pos))
                          (return (or (floor? nwhat) acc))))
                       #f
                       (neighboring-positions (list x y))))
      (return (and (wall? what) any-floors?)))]))

(define (set-seed . args)
  (match args
    [(list z w) (lset 'random-state (list z w))]
    [(list (list z w)) (lset 'random-state (list z w))]
    [(list) (lset 'random-state (list 0 0))]))

(define (mod32 x) (modulo x 4294967295))

(define (next-random-int)
  (monadic-do in: the-build-monad
              (rs <- (lget 'random-state))
              ((list z w) 
               is:
               (if (list? rs) rs
                   (list 1 1)))
              (new-z is: (mod32 (arithmetic-shift (+ (* 36969 (bitwise-and z 65535)) (arithmetic-shift z -16)) 16)))
              (new-w is: (mod32 (+ (* 18000 (bitwise-and w 65535)) (arithmetic-shift w -16))))
              (lset 'random-state (list new-z new-w))
              (return (mod32 (+ new-z new-w)))))

(define (next-random-uniform)
  (monadic-do in: the-build-monad
              (randint <- (next-random-int))
              (return (* (+ randint 1) 2.328306435454494e-10))))

(define (next-random-guassian)
  (monadic-do 
   in: the-build-monad
   (u1 <- (next-random-uniform))
   (u2 <- (next-random-uniform))
   (r is: (sqrt (* -2 (log u1))))
   (theta is: (* pi 2 u2))
   (return (* r (cos theta)))))


(define (run-build buildf . args)
  (match args
    [(list) (run-build buildf initial-build-state)]
    [(list (? doublet? ibs))
     (buildf ibs)]
    [(cons (? procedure? f) fs)
     ((apply compose (cons f fs)) (run-build buildf initial-build-state))]
    [(cons (? doublet? ibs) fs)
     ((compose fs) (run-build buildf ibs))]))

(define (build-fetch-grid build/st)
  ((compose (partial< at 'grid) doublet-b) build/st))




(define initial-build-state (doublet turtle/st build/st))

(set! the-build-monad (monad build-bind build-return build-plus build-zero))

(provide grid grid? dip-at unset-at set-at square-extent pos-i pos-j 
         set-rectangle set-vertical-line set-horizontal-line 
         set-filled-rectangle set-room)
