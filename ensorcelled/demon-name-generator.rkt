#lang racket 

(require functional/better-monads)

(define bom-names (list "Aaron"
"Aaron"
"Abinadi"
"Abinadom"
"Abish"
"Aha"
"Ahah"
"Akish"
"Alma"
"Alma"
"Amaleki"
"Amaleki"
"Amalickiah"
"Amaron"
"Aminadab"
"Aminadi"
"Amlici"
"Ammah"
"Ammaron"
"Ammon"
"Ammon"
"Ammoron"
"Amnigaddah"
"Amnor"
"Amoron"
"Amos"
"Amos"
"Amulek"
"Amulon"
"Antiomno"
"Antionah"
"Antionum"
"Antipus"
"Archeantus"
"Benjamin"
"Brother of Jared"
"Captain Moroni"
"Cezoram"
"Chemish"
"Christ"
"Cohor"
"Cohor"
"Cohor"
"Com"
"Com"
"Corianton"
"Coriantor"
"Coriantum"
"Coriantum"
"Coriantumr"
"Coriantumr"
"Coriantumr"
"Corihor"
"Corihor"
"Corom"
"Cumenihah"
"Emer"
"Emron"
"Enos"
"Esrom"
"Ethem"
"Ether"
"Ezias"
"Gadianton"
"Gid"
"Giddianhi"
"Giddonah"
"Giddonah"
"Gideon"
"Gidgiddonah"
"Gidgiddoni"
"Gilead"
"Gilgah"
"Gilgal"
"Hagoth"
"Hearthom"
"Helam"
"Helaman"
"Helaman"
"Helaman"
"Helem"
"Helorum"
"Hem"
"Heth"
"Heth"
"Himni"
"Isabel"
"Isaiah"
"Ishmael"
"Ishmael"
"Jacob"
"Jacob"
"Jacob"
"Jacom"
"Jared"
"Jared"
"Jarom"
"Jeneum"
"Jeremiah"
"Jesus Christ"
"Jonas"
"Jonas"
"Joseph"
"Josh"
"Kib"
"Kim"
"Kimnor"
"Benjamin"
"Kish"
"Kishkumen"
"Korihor"
"Kumen"
"Kumenonhi"
"Laban"
"Lachoneus"
"Lachoneus"
"Lamah"
"Laman"
"Laman"
"Laman"
"Laman"
"Lamoni"
"Lehi"
"Lehi"
"Lehi"
"Lehi"
"Lehonti"
"Lemuel"
"Levi"
"Lib"
"Lib"
"Limhah"
"Limher"
"Limhi"
"Luram"
"Mahah"
"Manti"
"Mathoni"
"Mathonihah"
"Morianton"
"Morianton"
"Mormon"
"Mormon"
"Moron"
"Moroni"
"Moroni"
"Moronihah"
"Moronihah"
"Mosiah"
"Mosiah"
"Mulek"
"Muloki"
"Nehor"
"Nephi"
"Nephi"
"Nephi"
"Nephi"
"Nephihah"
"Neum"
"Nimrah son of Akish"
"Noah"
"Noah"
"Omer"
"Omner"
"Omni"
"Orihah"
"Paanchi"
"Pachus"
"Pacumeni"
"Pagag"
"Pahoran"
"Pahoran"
"Riplakish"
"Sam"
"Samuel"
"Sariah"
"Seantum"
"Seezoram"
"Seth"
"Shared"
"Shem"
"Shemnon"
"Sherem"
"Shez"
"Shez"
"Shiblom"
"Shiblom"
"Shiblon"
"Shiz"
"Shule"
"Teancum"
"Teomner"
"Timothy"
"Tubaloth"
"Zarahemla"
"Zedekiah"
"Zeezrom"
"Zelph"
"Zemnarihah"
"Zenephi"
"Zeniff"
"Zenock"
"Zenos"
"Zerahemnah"
"Zeram"
"Zoram"
"Zoram"
"Zoram"))

(define star-trek-race-names (list "Aaamazzarite"
"Acamarian"
"Aenar"
"Akaali"
"Akritirian"
"Aksani"
"Alcyone"
"Aldean"
"Algolian"
"Alkian"
"Allasomorph"
"Alsuran"
"Andorian"
"Android"
"Angosian"
"Ankari"
"Annari"
"Antaran"
"Antarian"
"Antedean"
"Antican"
"Arbazan"
"Arcadian"
"Ardanan"
"Arcturian"
"Argala"
"Argelian"
"Argosian"
"Argrathi"
"Arkarian"
"Arkonian"
"Arrithean"
"Axanar"
"B'Saari"
"B'omar"
"Ba'ku"
"Ba'neth"
"Bajoran"
"Bandi"
"Banean"
"Bara"
"Barkonian"
"Barolian"
"Barzan"
"Benkaran"
"Benthan"
"Benzenite"
"Benzite"
"Berellian"
"Betazoid"
"Betelgeusian"
"Biomimetic"
"Bolian"
"Boraalan"
"Boray"
"Borg"
"Boslic"
"Botha"
"Breen"
"Brekkian"
"Brenari"
"Briori"
"Brunali"
"Bynar"
"Byzallian"
"Byzatium"
"Caatati"
"Cairn"
"Caitian"
"Calamarain"
"Caldonian"
"Camorite"
"Capellan"
"Cardassian"
"Chalnoth"
"Changeling"
"Chokuzan"
"Chrysalian"
"Coridan"
"Corvallen"
"Cravic"
"Crystalline"
"Cytherian"
"Cytoplasmic"
"D'Arsay"
"Dachlyd"
"Daliwakan"
"Debrune"
"Deltan"
"Denebian"
"Denobulan"
"Devidian"
"Devore"
"Dinaali"
"Doosodarian"
"Dopterian"
"Dosi"
"Douwd"
"Dralian"
"Drayan"
"Dream"
"Dreman"
"Druoda"
"Edo"
"Ekosian"
"El-Aurian"
"Elasian"
"Elaysian"
"Ellora"
"Enaran"
"Enolian"
"Entaban"
"Entharan"
"Eska"
"Etanian"
"Evora"
"Excalbian"
"Exocomp"
"Farn"
"Fek'Ihri"
"Fen"
"Ferengi"
"Flaxian"
"Fotiallian"
"Frunalian"
"Galadoran"
"Gallamite"
"Garan"
"Garenor"
"Genton"
"Gorn"
"Grazerite"
"Gree"
"Grizzela"
"Haakonian"
"Halanan"
"Haliian"
"Halkan"
"Haradin"
"Harkonian"
"Hazari"
"Hekaran"
"Hierarchy"
"Hirogen"
"Horta"
"Hologram"
"Human"
"Human"
"Human"
"Hunter"
"Hupyrian"
"Hur'q"
"Husnock"
"Iconian"
"Ikaaran"
"Ilari"
"Ilidarian"
"Illyrian"
"Imhotep"
"Iotian"
"Ithenite"
"Iyaaran"
"J'naii"
"Jarada"
"Jem'Hadar"
"K'normian"
"Kadi"
"Kaelon"
"Kantare"
"Karemma"
"Kartelan"
"Kaylar"
"Kazarite"
"Kazon"
"Kelvan"
"Kesat"
"Kinbori"
"Klaestron"
"Klingon"
"Kmada"
"Kobali"
"Kobliad"
"Kohl"
"Kolaati"
"Kolaran"
"Kolhari"
"Komar"
"Kostolain"
"Kotakian"
"Kovaalan"
"Kradin"
"Kraylor"
"Kreetassan"
"Krenim"
"Kressari"
"Kriosian"
"Ktarian"
"Kyrian"
"Kzin"
"Ledosian"
"Lethean"
"Leyron"
"Ligonian"
"Lissepian"
"Lokirrim"
"Lorillian"
"Lothra"
"Lurian"
"Lycocians"
"Lyridian"
"Lysian"
"Lyssarrian"
"Lytasian"
"M-"
"M'klexa"
"Makull's"
"Maldorian"
"Malkoth"
"Malon"
"Malurian"
"Mari"
"Mawasi"
"Mazarite"
"Medusan"
"Megarite"
"Mekhar"
"Melkot"
"Menk"
"Menthar"
"Metrons"
"Microbrain"
"Mikhal"
"Mikulak"
"Minosian"
"Mintakan"
"Miradorn"
"Mislenite"
"Mizarian"
"Mokra"
"Monean"
"Morphinian"
"Motali"
"Mulzirak"
"Mylean"
"N'Kree"
"Nacene"
"Napean"
"Nasari"
"Nassordin"
"Nausicaan"
"Nechani"
"Nezu"
"Night"
"Nihydron"
"Norcadian"
"Numiri"
"Nuu'bari"
"Nuvian"
"Nygean"
"Nyrian"
"Ocampa"
"Octran"
"Old"
"Organian"
"Orion"
"Ornaran"
"Osaarian"
"Ovion"
"Pakled"
"Pah"
"Paraagan"
"Parada"
"Parein"
"Paxans"
"Peliar"
"Peljenite"
"Pendari"
"Petarian"
"Ponea"
"Pralor"
"Prang"
"Promellian"
"Prophet"
"Proxcinian"
"Pygorian"
"Q"
"Qomar"
"Quarren"
"Rakhari"
"Rakosan"
"Ram"
"Ramuran"
"Reegrunion"
"Reman"
"Retellian"
"Rhaandarite"
"Rigelian"
"Rilnar"
"Risian"
"Romulan"
"Rutian"
"Sakari"
"Saltah'na"
"Satarran"
"Saurian"
"Scathosian"
"Selay"
"Serosian"
"Sheliak"
"Shivolian"
"Sikarian"
"Silver"
"Skagaran"
"Skrreea"
"Sky"
"Son'a"
"Species"
"Sphere"
"Srivani"
"Stakoron"
"Susanite"
"Suliban"
"Swarm"
"T-Rogoran"
"T'Lani"
"Tak"
"Takaran"
"Takarian"
"Takrit"
"Talarian"
"Talavian"
"Talaxian"
"Talosian"
"Tamarian"
"Tandaran"
"Tanugan"
"Tarahongian"
"Tarellian"
"Taresian"
"Tarkalean"
"Tarkan"
"Tarlac"
"Tavnian"
"Tellarite"
"Telsian"
"Teplan"
"Terellian"
"Terkellian"
"Terrelian"
"Terrellian"
"Tessic's"
"Thasian"
"Tholian"
"Tiburonian"
"Torothan"
"Tosk"
"Trabe"
"Triannon"
"Tribble"
"Trill"
"Troyian"
"Turei"
"Tygarian"
"Tzenkethi"
"U'tani"
"Ubean"
"Ullian"
"Uxali"
"V'radian"
"Vaadwaur"
"Valakian"
"Valerian"
"Valtese"
"Varro"
"Vaskan"
"Ventaxian"
"Ventu"
"Verathan"
"Verillian"
"Vhnori"
"Vian"
"Vidiian"
"Vissian"
"Vodwar"
"Vojean"
"Vok'sha"
"Vorgon"
"Vori"
"Vorta"
"Vostigye"
"Voth"
"Vulcan"
"Wadi"
"Wogneer"
"Wyngari"
"Wysanti"
"Xarantine"
"Xepolite"
"Xindi"
"Xyrillian"
"Yaderan"
"Yallitian"
"Yalosian"
"Yash-El"
"Yattho"
"Yridian"
"Zahl"
"Zakdorn"
"Zaldan"
"Zalkonian"
"Zaranite"
"Zetaran"
"Zeon"
"Zhuora"))

(define countries (list "Afghanistan"
"Albania"
"Algeria"
"Andorra"
"Angola"
"Antigua & Deps"
"Argentina"
"Armenia"
"Australia"
"Austria"
"Azerbaijan"
"Bahamas"
"Bahrain"
"Bangladesh"
"Barbados"
"Belarus"
"Belgium"
"Belize"
"Benin"
"Bhutan"
"Bolivia"
"Bosnia Herzegovina"
"Botswana"
"Brazil"
"Brunei"
"Bulgaria"
"Burkina"
"Burundi"
"Cambodia"
"Cameroon"
"Canada"
"Cape Verde"
"Central African Republic"
"Chad"
"Chile"
"China"
"Colombia"
"Comoros"
"Congo"
"Congo"
"Costa Rica"
"Croatia"
"Cuba"
"Cyprus"
"Czech Republic"
"Denmark"
"Djibouti"
"Dominica"
"Dominican Republic"
"East Timor"
"Ecuador"
"Egypt"
"El Salvador"
"Equatorial Guinea"
"Eritrea"
"Estonia"
"Ethiopia"
"Fiji"
"Finland"
"France"
"Gabon"
"Gambia"
"Georgia"
"Germany"
"Ghana"
"Greece"
"Grenada"
"Guatemala"
"Guinea"
"Guinea-Bissau"
"Guyana"
"Haiti"
"Honduras"
"Hungary"
"Iceland"
"India"
"Indonesia"
"Iran"
"Iraq"
"Ireland"
"Israel"
"Italy"
"Ivory Coast"
"Jamaica"
"Japan"
"Jordan"
"Kazakhstan"
"Kenya"
"Kiribati"
"Korea North"
"Korea South"
"Kosovo"
"Kuwait"
"Kyrgyzstan"
"Laos"
"Latvia"
"Lebanon"
"Lesotho"
"Liberia"
"Libya"
"Liechtenstein"
"Lithuania"
"Luxembourg"
"Macedonia"
"Madagascar"
"Malawi"
"Malaysia"
"Maldives"
"Mali"
"Malta"
"Marshall Islands"
"Mauritania"
"Mauritius"
"Mexico"
"Micronesia"
"Moldova"
"Monaco"
"Mongolia"
"Montenegro"
"Morocco"
"Mozambique"
"Myanmar"
"Namibia"
"Nauru"
"Nepal"
"Netherlands"
"New Zealand"
"Nicaragua"
"Niger"
"Nigeria"
"Norway"
"Oman"
"Pakistan"
"Palau"
"Panama"
"Papua New Guinea"
"Paraguay"
"Peru"
"Philippines"
"Poland"
"Portugal"
"Qatar"
"Romania"
"Russian Federation"
"Rwanda"
"St Kitts & Nevis"
"St Lucia"
"Saint Vincent & the Grenadines"
"Samoa"
"San Marino"
"Sao Tome & Principe"
"Saudi Arabia"
"Senegal"
"Serbia"
"Seychelles"
"Sierra Leone"
"Singapore"
"Slovakia"
"Slovenia"
"Solomon Islands"
"Somalia"
"South Africa"
"South Sudan"
"Spain"
"Sri Lanka"
"Sudan"
"Suriname"
"Swaziland"
"Sweden"
"Switzerland"
"Syria"
"Taiwan"
"Tajikistan"
"Tanzania"
"Thailand"
"Togo"
"Tonga"
"Trinidad & Tobago"
"Tunisia"
"Turkey"
"Turkmenistan"
"Tuvalu"
"Uganda"
"Ukraine"
"United Arab Emirates"
"United Kingdom"
"United States"
"Uruguay"
"Uzbekistan"
"Vanuatu"
"Vatican City"
"Venezuela"
"Vietnam"
"Yemen"
"Zambia"
"Zimbabwe"))

(define demon-names 
  (list "Abraxas"
		"Abbadon"
		"Agrith-Naar"
		"Aku"
		"Alastair"
		"Alastor"
		"Algaliarept"
		"Alichino"
		"Andariel"
		"Angel"
		"Anyanka"
		"Anzu"
		"Archimonde"
		"Artery"
		"Asmodeus"
		"Asura"
		"Azal"
		"Azazeal"
		"Azazel"
		"Azazel"
		"Azmodan"
		"Azura"
		"Amaimon"
		"Baal"
		"Babau"
		"Bacarra"
		"Bal'lak"
		"Balor"
		"Balrog"
		"Balthazar"
		"Baphomet"
		"Barakiel"
		"Barbariccia"
		"Barbas"
		"Bartimaeus"
		"Bat'Zul"
		"Beastie"
		"Be'lakor"
		"Bebilith"
		"Beelzebub"
		"Beleth"
		"Belfagor"
		"Belial"
		"Belphegor"
		"Belthazor"
		"Berry"
		"Betelguese"
		"Blackheart"
		"Cacodemon"
		"Cadaver"
		"Cagnazzo"
		"Calcabrina"
		"Calcifer"
		"Castor"
		"Cordelia"
		"Chernabog"
		"Cherry"
		"Ciriatto"
		"Claude"
		"Crawly"
		"Crowley"
		"Cyberdemon"
		"Cryto"
		"D'Hoffryn"
		"Dabura"
		"Draghinazzo"
		"Dante"
		"Darkseid"
		"Decarbia"
		"Delrith"
		"Demonita"
		"Devi"
		"Diablo"
		"Doviculus"
		"Doyle"
		"Dretch"
		"Dumain"
		"Duriel"
		"Errtu"
		"Etna"
		"Etrigan"
		"Faquarl"
		"Farfarello"
		"Femur"
		"Firebrand"
		"Randall"
		"Furfur"
		"Gaap"
		"Gary"
		"Glabrezu"
		"Gregor"
		"Gothmog"
		"The"
		"Halfrek"
		"Har'lakk"
		"Hastur"
		"Hellboy"
		"Hell"
		"Hezrou"
		"Hiei"
		"Him"
		"Hnikarr"
		"Hot"
		"Hex"
		"Infernal"
		"Inferno"
		"Jabor"
		"Jadis"
		"Janemba"
		"Japhrimel"
		"Jennifer"
		"Juiblex"
		"K'ril"
		"Kal'Ger"
		"DCI"
		"Khorne"
		"Kil'jaeden"
		"Kneesocks"
		"Koakuma"
		"Korrok"
		"Kronos"
		"Freddy"
		"Laharl"
		"Lamia"
		"Leviathan"
		"Libicocco"
		"Ligur"
		"Lilith"
		"Little"
		"Longhorn"
		"Lorne"
		"Loki"
		"Lucifer"
		"Mal'Ganis"
		"Malacoda"
		"Maledict"
		"Malfegor"
		"Malice"
		"Mammon"
		"Mancubus"
		"Mannoroth"
		"Marilith"
		"Masselin"
		"Meg"
		"Mehrunes"
		"Melkor"
		"Mephisto"
		"Mephisto"
		"Mephistopheles"
		"Mephisto"
		"N'zall"
		"Nadia"
		"Nalfeshnee"
		"Nanatoo"
		"Nero"
		"Neuro"
		"Newt"
		"Nouda"
		"Nurgle"
		"Oyashiro"
		"Rin"
		"Pazuzu"
		"Pennywise"
		"Psaro"
		"Quasit"
		"Queezle"
		"Qwan"
		"Qweffor"
		"Rakdos"
		"Ramuthra"
		"Red"
		"Retriever"
		"Randall"
		"Ronove"
		"Rosier"
		"Rubicante"
		"Ruby"
		"Satan"
		"Satan"
		"Sauron"
		"Scanty"
		"Scarlet"
		"Scarmiglione"
		"Scumspawn"
		"Sebastian"
		"Shax"
		"Silitha"
		"Slaanesh"
		"Sparda"
		"Spawn"
		"Spike"
		"Spine"
		"Straga"
		"Tempus"
		"Thammaron"
		"Tiamat"
		"Toby"
		"To'Kash"
		"Trigon"
		"Turok-Han"
		"Tzeentch"
		"Ungoliant"
		"Vein"
		"Vergil"
		"Violator"
		"Vrock"
		"Vulgrim"
		"Vyers"
		"Ware"
		"Wormwood"
		"Yaksha"
		"Yk'Lagor"
		"Zankou"
		"Zepar"
		"Overlord"
		"Zuul"))

(define (max-length-over g)
  (foldl (lambda (n s) 
		   (max n (string-length s)))
		 0
		 g))

(define (empty-string? s)
  (= 0 (string-length s)))

(define (those-non-empty strings)
  (let loop ((acc '())
			 (strings strings))
	(match strings
	  ((list) (reverse acc))
	  ((cons (? empty-string?) rest)
	   (loop acc rest))
	  ((cons s rest)
	   (loop (cons s acc)
			 rest)))))

(define (string-head s)
  (substring s 0 1))

(define (string-tail s)
  (substring s 1 (string-length s)))

(define (last-character s)
  (if (empty-string? s) ""
	  (substring s (- (string-length s) 1) (string-length s))))

(define (dict-update d key fun . args)
  (match args
	((list)
	 (let ((val (dict-ref d key)))
	   (dict-set d key (fun val))))
	((list or-value)
	 (let ((val (dict-ref d key (lambda () or-value))))
	   (dict-set d key (fun val))))))



(define (at-plus d k)
  (dict-update d k (lambda (x) (+ x 1)) 0))

(define (char->symbol c)
  (string->symbol (list->string (list c))))

(define (char->symbol* o)
  (cond ((symbol? o) o)
		((char? o) (char->symbol o))))

(struct triple (index from to) #:transparent)

(define (string->triples s)
  (let loop
	  ((i 0)
	   (l (append '(start) 
				  (string->list s)
				  '(end)))
	   (triples '()))
	(match l
	  ((list 'end) (reverse triples))
	  ((cons from 
			 (and rest
				  (cons to _)))
	   (loop 
		(+ i 1)
		rests
		(cons (triple i
					(char->symbol* from) 
					(char->symbol* to))
			  triples))))))


(define (populate-transition-table names)
  (let loop 
	  ((names names)
	   (table (make-immutable-hash '())))
	(match names
	  ((list) table)
	  ((cons name names)
	   (loop names
			 (foldl 
			  (lambda (triple table)
				(at-plus table triple))
			  table
			  (string->triples name)))))))

;; (string->triples "test")


;; (populate-transition-table demon-names)

(define (=/c n)
  (lambda (m)
	(= n m)))

(define (eq?/c a)
  (lambda (b)
	(eq? a b)))

(define (restrict-table table index from)
  (foldl
   (lambda (trip new-table) 
	 (match trip
	   ((triple
		 (? (=/c index))
		 (? (eq?/c from))
		 _)
		(dict-set new-table trip (dict-ref table trip)))
	   (_ new-table)))
   (make-immutable-hash '())
   (dict-keys table)))

(define (next-character table prev-character index . args)
  (match args
	((list) (next-character table prev-character
							index
							(current-pseudo-random-generator)))
	((list generator)
	 (let* ((sub-table 
			 (restrict-table table index prev-character))
			(total-elements (foldl + 0 (dict-values sub-table)))
			(draw (random total-elements generator)))
	   (let loop 
		   ((draw draw)
			(key/val (dict->list sub-table)))
		 (match key/val
		   ((cons (cons 
				   (triple _ from to)
				   count) rest)
			(if (or (empty? rest)
					(<= draw 0))
				to
				(loop (- draw count)
					  rest)))))))))

(define (symbol-list->string sl)
  (foldl (lambda (symbol string)
		   (string-append
			string (symbol->string symbol)))
		 ""
		 sl))

(define (generate-demon-name table . args)
  (match args
	((list) (generate-demon-name table (current-pseudo-random-generator)))
	((list gen)
	 (let loop ((ix 0)
				(name-list '(start)))
	   (let ((next (next-character table (car name-list) ix gen)))
		 (if (eq? next 'end)
			 (symbol-list->string (cdr (reverse name-list)))
			 (loop 
			  (+ ix 1)
			  (cons next name-list))))))))

(define standard-table (populate-transition-table demon-names))

(define (generate-demon-names table n . args)
  (match args
	[(list)
	 (generate-demon-names table n (current-pseudo-random-generator) '())]
	[(list gen)
	 (generate-demon-names table n gen '())]
	[(list gen acc)
	 (match n
	   [0 acc]
	   [n (generate-demon-names table (- n 1) gen 
								(cons (generate-demon-name table gen) acc))])]))

(provide generate-demon-names
		 generate-demon-name
		 standard-table
		 populate-transition-table)

